#!/usr/bin/perl -w

use strict;
use warnings;
use utf8;    # this script is written in utf8

use lib $ENV{'MUNIN_LIBDIR'};
use Munin::Plugin;

use Data::Dumper;
use Time::Piece;
use Time::Seconds;

use JSON;
use LWP::Simple;
use LWP::UserAgent;

# some munin init
need_multigraph();

# data
my $nodesurl = "http://map.freifunk-muenchen.de/nodes.json";
my $nodeprefix = "ffmuc";
my $nodes_ref;
my @state_vector = restore_state();

# all nodes and clients
my $sum_clientcount  = 0;
my $node_count       = 0;
my $sum_online_nodes = 0;

# firmware versions
my %firmware_count = ( 'zundef' => 0 );
my %firmware_name  = ( 'zundef' => 'undef' );
my %last_seen_v;

# models
my %model_count = ( 'zundef' => 0 );
my %model_name  = ( 'zundef' => 'undef' );
my %last_seen_m;

# clients on specific nodes
my %personal_node;

sub get_node_data {
    if ( defined $nodesurl ) {
        my $browser = LWP::UserAgent->new(
                ssl_opts => { SSL_verify_mode => 'SSL_VERIFY_NONE'},
        );
        my $content = $browser->get( $nodesurl );
        die 'Could not get it!' unless defined $content;
        $nodes_ref = decode_json($content->decoded_content);
    }
    else {
        die 'URL to get nodes.json not configured!';
    }

    my $nodes_age
        = gmtime()
        - Time::Piece->strptime( $nodes_ref->{'meta'}->{'timestamp'},
        '%Y-%m-%dT%H:%M:%S' );
    if ( $nodes_age->minutes > 5 ) {
        die 'nodes.json data too old (' . $nodes_age->pretty . ')';
    }
}

sub proc_node_data {
    foreach my $node ( @{ $nodes_ref->{'nodes'} } ) {
        if ( $node->{'flags'}->{'client'}
             && $node->{'flags'}->{'online'} )
        {
          $sum_clientcount = $sum_clientcount + 1;
        }
        if (!(     $node->{'flags'}->{'gateway'}
                || $node->{'flags'}->{'client'}
            )
            )
        {
            # number of online/offline nodes and client count
            $node_count++;
           # $sum_clientcount += $node->{'clientcount'};
            if ( $node->{'flags'}->{'online'} ) { $sum_online_nodes++ }

            # firmware versions (not wanted for gateways and clients)
            if ( defined $node->{'firmware'} ) {
                my $fieldname
                    = clean_fieldname( 'v' . $node->{'firmware'} );
                if ( exists( $firmware_count{$fieldname} ) ) {
                    $firmware_count{$fieldname}++;
                }
                else {
                    $firmware_count{$fieldname} = 1;
                }
                if ( not exists $firmware_name{$fieldname} ) {
                    $firmware_name{$fieldname} = $node->{'firmware'};
                }
            }
            else {
                $firmware_count{'zundef'}++;
            }

            # models (this is not wanted for gateways and clients)
            if ( defined $node->{'model'} ) {
                my $fieldname
                    = clean_fieldname( 'm' . $node->{'model'} );
                if ( exists( $model_count{$fieldname} ) ) {
                    $model_count{$fieldname}++;
                }
                else {
                    $model_count{$fieldname} = 1;
                }
                if ( not exists $model_name{$fieldname} ) {
                    $model_name{$fieldname} = $node->{'model'};
                }
            }
            else {
                $model_count{'zundef'}++;
            }
        }
    }
}

sub count_personal_nodes_clients {
    foreach my $node ( @{ $nodes_ref->{'nodes'} } ) {
        foreach my $pnode ( keys %personal_node ) {
            foreach my $id ( @{ $personal_node{$pnode}->{ids} } ) {
                if ( $node->{'id'} eq $id ) {
                    # print {*STDERR} "found " . $id . "\n";
                    $personal_node{$pnode}->{clientcount}
                        = $node->{'clientcount'};
                }
            }
        }
    }
}

sub deserialize_state {
    foreach my $element (@state_vector) {
        # split line in variables
        my ( $category, $timestamp, $fieldname, $value )
            = split( /:/, $element, 4 );

        # skip this entry if too old, it will not be written again later
        my $entry_age
            = gmtime() - Time::Piece->strptime( $timestamp, "%s" );
        if ( $entry_age->hours > 1 ) { next; }

        # distinguish different categories and handle them
        if ( $category eq 'last_seen_m' ) {
            $last_seen_m{$fieldname} = $timestamp;
            if ($value) {
                $model_name{$fieldname} = $value;
            }
            $model_count{$fieldname} = 0;
        }
        elsif ( $category eq 'last_seen_v' ) {
            $last_seen_v{$fieldname} = $timestamp;
            if ($value) {
                $firmware_name{$fieldname} = $value;
            }
            $firmware_count{$fieldname} = 0;
        }
        else {
            next;
        }
    }
}

sub update_last_seen_times {
    foreach my $key ( keys %model_count ) {
        if ( $model_count{$key} > 0 ) {
            $last_seen_m{$key} = time();
        }
    }

    foreach my $key ( keys %firmware_count ) {
        if ( $firmware_count{$key} > 0 ) {
            $last_seen_v{$key} = time();
        }
    }
}

sub serialize_state {
    my @new_state;
    foreach my $key ( keys %last_seen_m ) {
        if ( $key eq 'zundef' ) { next; }
        push @new_state, join ':', 'last_seen_m', $last_seen_m{$key},
            $key, $model_name{$key};
    }
    foreach my $key ( keys %last_seen_v ) {
        if ( $key eq 'zundef' ) { next; }
        push @new_state, join ':', 'last_seen_v', $last_seen_v{$key},
            $key, $firmware_name{$key};
    }

    # print {*STDERR} Dumper(@new_state);
    save_state(@new_state);
}

sub read_personal_node_config {
    if ( not defined $ENV{personal_node_n} ) {
        return;
    }

    for ( my $i = 1; $i <= $ENV{personal_node_n}; $i++ ) {
        my $name_key = 'personal_node_' . $i . '_name';
        my $ids_key  = 'personal_node_' . $i . '_ids';

        if ( not defined $ENV{$name_key} ) {
            print {*STDERR} "$name_key not set in config\n";
            next;
        }
        if ( not defined $ENV{$ids_key} ) {
            print {*STDERR} "$ids_key not set in config\n";
            next;
        }

        my $fieldname = clean_fieldname( 'n' . $ENV{$name_key} );
        $personal_node{$fieldname} = {
            'name'        => $ENV{$name_key},
            'ids'         => [ split( /,/, $ENV{$ids_key} ) ],
            'clientcount' => 0,
        };
    }
}

### main

read_personal_node_config();

# process data
deserialize_state();

if ( $ARGV[0] and $ARGV[0] eq "config" ) {
    # Nodes and Clients
    print "multigraph ${nodeprefix}_all_nodes\n";
    print "graph_title Freifunk Nodes and Clients\n";
    print "graph_args --base 1000 --lower-limit 0\n";
    print "graph_scale no\n";
    print "graph_category ffmuc\n";
    print "graph_vlabel #\n";
    print "online.label online\n";
    print "online.type GAUGE\n";
    print "online.draw AREASTACK\n";
    print "online.min 0\n";
    print "online.colour 00FF00\n";
    print "online.info Number of online nodes.\n";
   # print "offline.label offline\n";
   # print "offline.type GAUGE\n";
   # print "offline.draw AREASTACK\n";
   # print "offline.min 0\n";
   # print "offline.colour DDDDDD\n";
   # print "offline.info Number of offline nodes.\n";
    print "clients.label clients\n";
    print "clients.type GAUGE\n";
    print "clients.min 0\n";
    print "clients.colour 0000FF\n";
    print "clients.info Sum of clients over all nodes.\n";

    # Personal Nodes
    if ( scalar keys %personal_node > 0 ) {
        print "multigraph ${nodeprefix}_personal_nodes\n";
        print "graph_title Personal Freifunk Nodes\n";
        print "graph_args --base 1000 --lower-limit 0\n";
        print "graph_scale no\n";
        print "graph_category ffmuc\n";
        print "graph_vlabel Clients\n";

        foreach my $key ( sort keys %personal_node ) {
            print $key
                . '.label '
                . $personal_node{$key}->{name} . "\n";
            print $key . ".draw AREASTACK\n";
            print $key . ".min 0\n";
        }
    }

    # Node Models
    print "multigraph ${nodeprefix}_models\n";
    print "graph_title Freifunk Node Models\n";
    print "graph_args --base 1000 --lower-limit 0\n";
    print "graph_scale no\n";
    print "graph_category ffmuc\n";
    print "graph_vlabel Nodes\n";

    foreach my $key ( sort keys %model_name ) {
        print "${key}.label " . $model_name{$key} . "\n";
        print "${key}.draw AREASTACK\n";
        print "${key}.min 0\n";
        if ( $key eq 'zundef' ) {
            print "${key}.colour DDDDDD\n";
        }
    }

    # Node Firmware Versions
    print "multigraph ${nodeprefix}_firmware_versions\n";
    print "graph_title Freifunk Node Firmware Versions\n";
    print "graph_args --base 1000 --lower-limit 0\n";
    print "graph_scale no\n";
    print "graph_category ffmuc\n";
    print "graph_vlabel Nodes\n";

    foreach my $key ( sort keys %firmware_name ) {
        print "${key}.label " . $firmware_name{$key} . "\n";
        print "${key}.draw AREASTACK\n";
        print "${key}.min 0\n";
        if ( $key eq 'zundef' ) {
            print "${key}.colour DDDDDD\n";
        }
    }

    exit 0;
}

get_node_data();
proc_node_data();
update_last_seen_times();
serialize_state();

# all nodes graph values
print "multigraph ${nodeprefix}_all_nodes\n";
print "online.value $sum_online_nodes\n";
print "clients.value $sum_clientcount\n";

# process personal nodes/clients graph
count_personal_nodes_clients();
if ( scalar keys %personal_node > 0 ) {
    print "multigraph ${nodeprefix}_personal_nodes\n";

    foreach my $key ( sort keys %personal_node ) {
        print $key
            . '.value '
            . $personal_node{$key}->{clientcount} . "\n";
    }
}

# models
print "multigraph ${nodeprefix}_models\n";
foreach my $key ( sort keys %model_count ) {
    print "${key}.value " . $model_count{$key} . "\n";
}

# firmware
print "multigraph ${nodeprefix}_firmware_versions\n";
foreach my $key ( sort keys %firmware_count ) {
    print "${key}.value " . $firmware_count{$key} . "\n";
}

# vim: set ft=perl et sts=0 ts=4 sw=4 sr:
